# -*- coding: utf-8 -*-
# @Time    : 2022/8/20 16:42
# @Author  : 4v1d
# @File    : Js对称加密.py
# @Software: PyCharm

import execjs

def js_from_file(file_name):
    with open(file_name, 'r', encoding='UTF-8') as file:
        result = file.read()

    return result
r = js_from_file('数据还原.js')
content = execjs.compile(r)
print(content)
res = content.call("decode1",'A6AE1A7B56514801AD397A87214D65D434A19A9423001916FB6FBBACD025BBFDF0CD6A8952B4F1F603DFD1D0449A4DBF13538DAABD460E70D8333A485A047B044FCCD9B3CEE64C129CA153AB551A5F59C99569229DC32C8D8DF474CA84F37CF1E173B5194A03FEA5A709DE56FFA689B988D454ECC9532D96C17B4E1895B29BF338E5E6A9667704E415D3A936F67835203AAA5884604A19D226C5B649563ED99A6F4240EE624D602078DD43A66E7AAA0331EAC30CAC6C397A9757EBD8FAB9354C626B983F5196E1194B6829924D2A070A0D46AA2CC17929AB52AD090CCC3F48A9C14909317FA7A408639F3493D97B1F57E121C1603E2B0E76C2F9BE5940BA5A912D3C8FC6D411D0ACA07A9EC90C75E2409523D1A57037750966DBAF62155AE1D8D622F0A59426082195E90A15125DBB8EA3D4AE64ACC38EC5759DD63D4A041759F91D29C8EA6E4C38FDC37318622247EF77D88C09706A340CAA710054FEC9CA0E69135FB3F2373273C4832875E802F35AAB6ADBDFA2FF83172C8860E15986D39EE1F238BC366E3B07787998ED908787DE0090644AF5CE8681964B50A19DD0F98F297FEDED3D84EFE9C4D31C4417BD5C1FB969EADEEFCB47B32A9C2F53BDE16F1FBB5250D92D2B9228967A01417F2EF8AA967C0F8B7A3F6C9DA8C7F240A52B735DFFA0F3842F2C8E07E4098600A240B4F6F9839740F8752C61DC44ACC828C31AD48472EB855BBCE4D71B23C8F6617CB829863FE4A3ECA7ABCFF8CE842ADAE7B695AD12FD4B15C30A29DBF4EB5DDA32FBE25A2FD29010BB6F359D523CA8A1DCEE02AFD4B34CEAD41D4D669A62724A936CC4DF7E128B4A9D7EC6A1D211042D460E70D8333A48528A295FF516491287E55F109CF59F5BC51A5F59C995692291C94734D6F48D1B0EDA1FCA6279044344646AF386D5FFBAF017ED16C2643228A3E597F8FC56AA4919E6AD0C0712C393BCD95C9FF0E182B15AB843BC6B1C6C2513780344CE50CB5F290CAE7BE2E64F174DDE537920512A47CF30CF57FE4F63695C1132C081E301EF7D11F4C71126BFEE99C63397AE54F712A1C336EF86C55CA26D94269086729BBEDA14145AE98EEAC57183458DC98EEC2919F5D94162AD57ABFE1453698632760564F054184D024833866E3F965200B4066A9CCAA96B2E49CA0EAF3623B4FDCD292E9388786899307B2D7AD98188F17E4BA043921D9F76A06CA6E21A741532C7C568F7B3F685761AE56A8C51EFE0EFD66E41C11CA8198577972C9A2F7F365A4E2A9AE0DA870C99D3069E51613F5FA4222F0AE806559F36DABE58E49FF1836FF882EF3FF650CF50364B9017ED16C2643228A997F39083551B2D7A1669F5FC2DDA08DCA8ECE5276D28F99752543E8FBD507F34B05BED4B83B7779E4148D2EC9BD5159BC39BA3A91E0C399C6C397A9757EBD8FAB9354C626B983F5B9AC25EACEAB2B43D2A070A0D46AA2CC17929AB52AD090CCC3F48A9C14909317FA7A408639F3493D97B1F57E121C1603E2B0E76C2F9BE5940BA5A912D3C8FC6DA2495E6391D56DA34EA108A097E44B241C36A8B1DE9FCE9F321B977E313140B1E5F4F120C4AF3A6525DBB8EA3D4AE64A67036CBFF4748F26DE08378DA3A49F86F08C685B299E480E22247EF77D88C0975E0A8BF4E5DCC86DEC9CA0E69135FB3FF08D2271D6464EDC79D2624549317178170834115601C751513FCFAC2C95E3E3A561B9B34003463710CF3D6942EAE41067704E415D3A936FC21A7051AA377C4304A19D226C5B6495E6794B246330C45E0A119E9EA12B7741FAECDE814C48816EFE0B95DB12CAEB9FED19ACA344A313219A8998F26E7DD8BE0AA8F2F043B0FF4DC7EC8A5419B7EA27384BCBDB88E9F356D0E5C6B3BEFC86CF59E8B06A995014A505873887D378ED26590750998FBA166FF0B0818941503596807C91B6D1C673DCD8341848F0C57D391A728EBD8AE6A7EF8458343F6AF9A23386DF9C5B42066E2059FB48EC09FDB3CA994625C3DCDE31E9E8AA92BF7604A6EB0E601ABCDC81679F7585E41740126E9C92D8DCC27FA237A0A6EFDFD055818F991571A0C531F664ADA2D70C61624820E231F0EB08BAB3D4FCC01204C6BF7935EFD51280572FD351E6671F79D6060566D934100267847C7D60EE6C486CC642E31DD10BC4E1A355B34F24D602078DD43A6671191D34B6DF67F2CE09CFAFD143A70B347B96C9688CAF927D73219040102A6BB676AC7B2BB9CD6F0829130043C250AEEB1B3D4D3C4F8F66ECFF7331A1D3CED8D6B1940D5983D271E265D758CD64C3629C93EA7A8BD553006A43D1A6FFDB245FD4693DD23192B59CEF6B307B430B590F5B0D710EABD86556EDB4C5CE57DD520B6941C0981DB9704EDE94CB71247D5568555E3D33ED9FDAC00ABFCF57FED4A7B0A59CF609579A2D39313BCA5333F9B6857A1DFBA1EA670C955063FCB44B957DD6E07797C59A3F563A6538FE42F6EA6F825B456248FF6325647AA0B4C80DD7EA8F4803A33B057D8551B95E3CBA21E837E38618919E7FEEE50FC5D73C8CCACDD1BF1D811214C72AD1A5C01204C6BF7935EFBF90A749D347E62A2E6AA4DEC45DF57962FA83E8306897DDF95E066408B95DCB7CA105D8DD77347BF2EF8AA967C0F8B7A3F6C9DA8C7F240A0994B069B9A60903F2C8E07E4098600A240B4F6F9839740F8752C61DC44ACC828C31AD48472EB855BBCE4D71B23C8F6617CB829863FE4A3E3F6543546C3BD713AE7B695AD12FD4B1EAE9CD5639A4DBD83F92C64B0BA39852431DBEB548910B121DCEE02AFD4B34CEAD41D4D669A62724A1C31F04099FD27D9690578C845D0692D460E70D8333A4854D774D18C0C340506A3FA42ACA39FB0551A5F59C995692290627FC824670D94D76C618DB718C39B9A03FEA5A709DE56FFA689B988D454ECC0296DA942BFE441DE836EAC2FD32F212017ED16C2643228A3E4DB434EB0E665560629D23F0B367A63CC365F97E89F98B1D542F9132340FFF907D24E3B62D7893694B24FC41A74CBE2C9ED0E750AC7C7F1ECF8451717CDD7E4956FD3B3B99457000204821FFF887A6937DDB5E3A7AA891D35820257686C950A7E3761709B542119906D39E21FD78E5A04F656A99B303F7485D7D505049A33307ADCCDB0633413BDAD7603EFEAC73EF58686095244CB9B4C54A4F396943CA1DE5BE2228705EF33025217F1E8C566B5A25F4B07AB9CE0219397B2539566A70F96EC1FE1E2BB63D48B7AF0559096C4EC2CDE6FD56DB45C319E16BC69F58D365759C8FBA3DE3CF2AF8652B4E8DA79C58CD699C84B49C668F7CE40B4C0D1A58971C66E3B07787998ED9B2C9AEBD0961398F9E6AD0C0712C393B46412D1F00C5842FAB843BC6B1C6C2513780344CE50CB5F29C98EDFBCF73B09A02B6276438539918F30CF57FE4F63695C1132C081E301EF7D11F4C71126BFEE99C63397AE54F712A1C336EF86C55CA26D94269086729BBEDA14145AE98EEAC57183458DC98EEC2919F5D94162AD57ABFE1453698632760569E90B175C5CBEABAA0DE11BF17F29846DA97951762BFE2785A56831CB137062437A8C410C6088B63D7AD98188F17E4BA043921D9F76A06CAA8A5D1B61F95895575BCF6C3328D9F49B9286C41CBDFDC7D334EB92387D187D338BB3720C5B909D5614E42D26F679492BC87615E7EE9A0C92729CB329959D0931457DDD73707CEB768ADC17DB61F1D70A2D70C61624820E28AC71582DE5CE7E2C01204C6BF7935EF72834B700FCDEC17671F79D6060566D921F8AD173D891F42EE6C486CC642E31DD10BC4E1A355B34F24D602078DD43A66B1EE61DE92FDAE10CE09CFAFD143A70B347B96C9688CAF921C70CF489D187D10B676AC7B2BB9CD6F0829130043C250AEEB1B3D4D3C4F8F66ECFF7331A1D3CED8D6B1940D5983D271E265D758CD64C36219856B03361ACFA195DD8E95BB4EF0E12D016EB674E43038EA19DBF5E5D68EA3FBCEBABFF9B130E84C16522C42661E026941C0981DB9704EEC716899B36E2A1E555E3D33ED9FDAC0D5796EE3019E6996A8C51EFE0EFD66E4E89F344C993FBC537A1DFBA1EA670C95E05B365662A9A795C4616DBFAEC1639FCD72D42EE88575F7FA689B988D454ECCC57F6182F75A0D62A4A6DD842C45873366E3B07787998ED91C6473B96A7DBC0D9624B3D11C084C3A0518A1F94233E64E8A50416896050FB2FDDDA94D69A734F6E8BA1E97DCDAB8271345DA0ED1EDC3E8F5AE51DFFED1CD27E9B63B83727C40C746D9EB407656A7C364B26247FE8B50750F646C53DB3B4FF2EA6A7C2D46DF8257297CF7CB97F33E7AA40202420ABC926DE580A5F75033AFC714D62D048925BB906CCB1EA9B9C63F88DDCD52197B4360BA0C63C9002ADA29BB9FF3CB67B4504F83D33E698F52BF709FE232F4CB9E5182DF27A6EA1C6AAC8D76')
import json

source = json.loads(res)
# print(type(source))
#
# print(source)

data = source['Data']['Table']
# print(data)
datalist = []
for i in data:
    item = {
        '名字':i['MovieName'],
        '上映时间':i['releaseTime'],
        '海报':i['defaultImage'],
        '口碑指数':i['RapIndex'],
        '平均票价':i['avgboxoffice'],
        '单月票房':i['boxoffice']
    }
    print(item)
    datalist.append(item)

import csv

with open('data.csv', 'w',encoding='utf-8') as csvfile:
    fieldnames = ['名字', '上映时间', '海报','口碑指数','平均票价','单月票房']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    for i in datalist:
        writer.writerow(i)